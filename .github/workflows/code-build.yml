##
# (c) 2021 - CloudopsWorks OÃœ - https://docs.cloudops.works/
#
name: Code Build Workflow Template

on:
  workflow_call:
    inputs:
      DOCKER_REGISTRY_ADDRESS:
        required: true
        type: string
      HELM_REGISTRY_ADDRESS:
        required: true
        type: string
      BOT_USER:
        required: true
        type: string
      BOT_EMAIL:
        required: true
        type: string
      isSnapshot:
        default: true
        required: false
        type: boolean

      
    outputs:
      release_version:
        value: ${{ jobs.build.outputs.release_version }}
    secrets:
      dockerRegistryUser:
        required: true
      dockerRegistryPassword:
        required: true
      helmRegistryUser:
        required: true
      helmRegistryPassword:
        required: true
      BOT_TOKEN:
        required: true



jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.release.outputs.release_version }}
    steps:
      # Proceed with checkout of source with all the references (depth=0)  
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_TOKEN }}
      # Setup Java JDK for builds
      - name: Set JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: "8"
          distribution: "zulu"
      # Helm Chart build & deploy Support
      - uses: azure/setup-helm@v1
      # Cache all maven packages
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Get Pipeline configuration
      - name: Get Pipeline Config
        id: pipelineConfig
        uses: cloudopsworks/java8-app-template/.github/workflows/pipeline-conf.yml@master

      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "::set-output name=owner::$repo_owner"
          echo "::set-output name=repo_name::$repo_name"

      # Next version for build and create VERSION file
      - name: Next Version
        id: nextVersion
        uses: cloduopsworks/java8-app-template/.github/woorkflows/next-version.yml@master

      # Maven version set to POM.XML
      - name: Maven Version
        run: mvn --batch-mode versions:set -DnewVersion=$(cat VERSION) 
      # Build the code!
      - name: Build Code
        run: mvn --batch-mode --update-snapshots clean package
      # Proceed with helm chart versioning bump
      - name: Helm Chart Versioning
        if: steps.pipelineConfig.outputs.pipelineHelm == 1
        env:
          HELM_REGISTRY_ADDRESS: ${{ inputs.HELM_REGISTRY_ADDRESS }}
          DOCKER_REGISTRY_ADDRESS: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
          REPOSITORY_OWNER: ${{ steps.getowner.outputs.owner }}
          REPOSITORY_NAME: ${{ steps.getowner.outputs.repo_name }}
        run: |
          cd charts/${REPOSITORY_NAME}
          make tag
      # Push the changes to Git TAG before deploying anything
      - name: Push TAG
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          VERSION=$(cat VERSION)
          git config --global user.name "${{ input.BOT_USER }}"
          git config --global user.email "${{ input.BOT_EMAIL }}"
          git commit -a -m "chore: release version v$VERSION"
          git tag -fa v$VERSION -m "Release Version v$VERSION"
          git push origin v$VERSION
      # Deploy release to Maven Repository (defaults to Github repo)
      - name: Deploy to Maven Repo
        run: mvn --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
      #
      # Docker Build and deploy to registry
      #
      - name: Docker Login
        if: steps.pipelineConfig.outputs.pipelineDocker == 1
        uses: docker/login-action@v1
        with:
          registry: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
          username: ${{ secrets.dockerRegistryuser }}
          password: ${{ secrets.dockerRegistryPassword }}
      - name: Set up Docker Buildx
        if: steps.pipelineConfig.outputs.pipelineDocker == 1
        uses: docker/setup-buildx-action@v1
      - name: Docker Push
        if: steps.pipelineConfig.outputs.pipelineDocker == 1
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          tags: |
            ${{ input.DOCKER_REGISTRY_ADDRESS }}/${{ steps.getowner.outputs.owner }}/${{ steps.getowner.outputs.repo_name }}:latest
            ${{ input.DOCKER_REGISTRY_ADDRESS }}/${{ steps.getowner.outputs.owner }}/${{ steps.getowner.outputs.repo_name }}:${{ steps.release.outputs.release_version }}
      #
      # Helm Build and deploy to registry
      #
      - name: Helm Build
        if: steps.pipelineConfig.outputs.pipelineHelm == 1
        env:
          HELM_REGISTRY_ADDRESS: ${{ inputs.HELM_REGISTRY_ADDRESS }}
          DOCKER_REGISTRY_ADDRESS: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
          HELM_CREDS_USER: ${{ secrets.helmRegistryUser }}
          HELM_CREDS_PASSWORD: ${{ secrets.helmRegistryPassword }}
          HELM_EXPERIMENTAL_OCI: "1"
          REPOSITORY_OWNER: ${{ steps.getowner.outputs.owner }}
          REPOSITORY_NAME: ${{ steps.getowner.outputs.repo_name }}
        run: |
          cd charts/$REPOSITORY_NAME
          make release

      #
      # Perform ZIP packaging of target files & globbed files
      #
      - name: ZIP file packaging
        if: steps.pipelineConfig.outputs.pipelineZip == 1
        run: |
          VERSION=$(cat VERSION)
          ZIPFILE=target/${{ steps.getowner.outputs.repo_name }}-v${VERSION}.zip
          mkdir -p target/
          echo '${{ steps.pipelineConfig.outputs.zipGlobs }}' > target/.includelist
          echo '${{ steps.pipelineConfig.outputs.excludeGlobs }}' > target/.excludelist
          zip -u -r ${ZIPFILE} . -i@target/.includelist -x@target/.excludelist
